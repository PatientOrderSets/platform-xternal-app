class ApplicationController < ActionController::Base
  # Prevent CSRF attacks by raising an exception.
  # For APIs, you may want to use :null_session instead.
  protect_from_forgery with: :exception

  before_filter :authenticate_user_from_ep_platform
  before_filter :authenticate_user!

  def doorkeeper_oauth_client
    @client ||= OAuth2::Client.new(Rails.configuration.doorkeeper_application_id,
                                   Rails.configuration.doorkeeper_secret,
                                   site: Rails.configuration.doorkeeper_application_url)
  end

  def doorkeeper_access_token
    logger.info current_user.inspect
    if current_user
      if current_user.doorkeeper_access_token
        @access ||= OAuth2::AccessToken.new(doorkeeper_oauth_client, current_user.doorkeeper_access_token,
                                        refresh_token: current_user.doorkeeper_refresh_token)
      else
        @access ||= doorkeeper_oauth_client.auth_code.get_token(current_user.doorkeeper_request_token,
                                                                redirect_uri: 'http://xternal.aw.dev.pos:3001/access/jwt')
        current_user.update_attributes! doorkeeper_access_token: @access.token, doorkeeper_refresh_token: @access.refresh_token
        @access
      end
    end
  end

  def authenticate_user_from_ep_platform
    if params[:jwt]
      jwt_token = JSON::JWT.decode params[:jwt], Rails.configuration.doorkeeper_application_id

      # You will want to check to see if the JWT token is generated by the right application. That is,
      # you need to check that the aud, iss claims are what you expect. I've omitted here as this is just a
      # sample application.

      user = User.find_or_create_by(upn: jwt_token['upn']) do |user|
        user.first_name = jwt_token['first_name']
        user.last_name = jwt_token['first_name']
        user.email = jwt_token['email']
        user.doorkeeper_request_token = jwt_token['oauth_request_token']
      end

      user.save if user.changed?

      logger.info("User info is: #{user.inspect}")

      sign_in user
    end
  end
end
